#! /usr/bin/env bash
# This is an internal script which is expected to be sourced from another script
# and expects the following parameters to be defined (values below are only examples):
# CF_STACK_SUFFIX=-Eswarm
# DEPLOY_SWARM=nexted
# AWS_CF_STACK_NAME=${DEPLOY_SWARM}${CF_STACK_SUFFIX}
# MGR_NODE_INSTANCE_TYPE=t2.medium
# MGR_NODE_INSTANCE_CNT=1
# WKR_NODE_INSTANCE_TYPE=t2.micro
# WKR_NODE_INSTANCE_CNT=1
# AWS_STACK_KEYPAIR=riffswarm_1_useast1_key
# optional will use the default defined by docker-swarm.py
# AWS_STACK_REGION=us-east-1

# Test this is likely being run from the root of the edu-docker repo working dir
if [[ ! ( -e Makefile && -e bin/docker-swarm.py && -e bin/build-vars ) ]]; then
    echo "You do not seem to have sourced this script from the root of the edu-docker working directory."
    echo "Change to the edu-docker working directory and run:"
    echo "  . bin/create_aws_${DEPLOY_SWARM}_stack"
    echo
    return 1
fi

# We're in the right CWD but we still need to be able to activate the python 3 virtual environment so check for it
if [[ ! -e activate ]]; then
    echo "The activate script must exist in the CWD, is the python3 virtual environment"
    echo "configured (docs/python-setup.md)?"
    echo
    return 2
fi

source activate

REGION_OPT=${AWS_STACK_REGION:+"--region=$AWS_STACK_REGION"}

echo Creating the $DEPLOY_SWARM swarm in AWS${AWS_STACK_REGION:+" ($AWS_STACK_REGION)"}:
echo "  with $MGR_NODE_INSTANCE_CNT $MGR_NODE_INSTANCE_TYPE Manager "'node(s)'" and $WKR_NODE_INSTANCE_CNT $WKR_NODE_INSTANCE_TYPE Worker "'node(s)'
echo "  using the $AWS_STACK_KEYPAIR key pair for ssh access"
echo
echo bin/docker-swarm.py create -w $WKR_NODE_INSTANCE_CNT -i $WKR_NODE_INSTANCE_TYPE -m $MGR_NODE_INSTANCE_CNT -I $MGR_NODE_INSTANCE_TYPE --key=$AWS_STACK_KEYPAIR $REGION_OPT $AWS_CF_STACK_NAME
bin/docker-swarm.py create -w $WKR_NODE_INSTANCE_CNT -i $WKR_NODE_INSTANCE_TYPE -m $MGR_NODE_INSTANCE_CNT -I $MGR_NODE_INSTANCE_TYPE --key=$AWS_STACK_KEYPAIR $REGION_OPT $AWS_CF_STACK_NAME
date

echo
echo "Wait for the creation of the CloudFormation stack to complete."
echo "The status will be checked and reported every minute until it is"
echo "complete (10-20 min) at which time setting up the newly completed"
echo "docker swarm will continue."
echo "  - add an entry to ~/.ssh/config for the 1st swarm manager (s/b checked)"
echo "  - create a tunnel to that 1st swarm manager"
echo "  - add labels to the swarm nodes as needed"
echo "  - deploy the support services (registry and visualizer)"
echo "  - create configs"
echo
echo "Then the following will have to be done manually:"
echo "  - create secrets"
echo "  - build, push and deploy the desired swarm services"
echo "  - possibly restore data (e.g. riff-server mongo DB)"
echo "  - make sure that the AWS Route 53 Hosted Zone (e.g. riffplatform.com"
echo "    or riffedu.com) has an A record alias pointing at the"
echo "    $AWS_CF_STACK_NAME just created above."
echo
echo bin/docker-swarm.py wait-for-complete $REGION_OPT $AWS_CF_STACK_NAME
bin/docker-swarm.py wait-for-complete $REGION_OPT $AWS_CF_STACK_NAME

echo

MGR_IP=$(bin/docker-swarm.py get-stack-manager-ip -i 0 $REGION_OPT $AWS_CF_STACK_NAME)

echo "Adding an entry for the 1st manager ($MGR_IP) of $AWS_CF_STACK_NAME to ~/.ssh/config"
cat << EOF >> ~/.ssh/config

# Riff Learning Amazon Web Services (aws) $AWS_CF_STACK_NAME stack docker swarm manager 0
Host $AWS_CF_STACK_NAME $MGR_IP
  HostName $MGR_IP
  User docker
  IdentityFile ~/.ssh/${AWS_STACK_KEYPAIR}.pem
  IdentitiesOnly yes
  ForwardAgent yes
EOF

echo "Adding the manager's fingerprint to ~/.ssh/known_hosts"
ssh-keyscan $MGR_IP >> ~/.ssh/known_hosts

echo
echo Tunneling to a manager of the new swarm
bin/docker-swarm.py tunnel $REGION_OPT $AWS_CF_STACK_NAME

echo Setting and exporting DOCKER_HOST
export DOCKER_HOST=localhost:2374

MGR_NODE_ID=( $(docker node ls --filter="role=manager" --format="{{.ID}}") )
WKR_NODE_ID=( $(docker node ls --filter="role=worker" --format="{{.ID}}") )

# labeling the nodes will depend on the number and instance type of the
# nodes created for the stack, so that should be done by the caller who
# defined the *_INSTANCE_TYPE and CNT parameters


# Next steps for initializing the docker swarm (rough draft)
#
# # Make sure that AWS Route 53 riffplatform.com Hosted Zone has an
# # A record alias pointing at the $AWS_CF_STACK_NAME just created above.
#
# # find a manager ip and add a section to ~/.ssh/config
# bin/docker-swarm.py get-stack-manager-ips $REGION_OPT $AWS_CF_STACK_NAME
#
# # tunnel to the docker swarm we just created
# source bin/tunnel $DEPLOY_SWARM
#
# # find the NODE IDs to assign to the vars below (values given are examples)
# docker node ls
# MGR_NODE_1_ID=w0v1av2hdap4tymky5lgzw4ak
# WKR_NODE_1_ID=je49aaf4baix5euhvaf4pkb7p
#
# # add labels to the docker nodes
# docker node update '--label-add '{riffapi=true,web=true} $MGR_NODE_1_ID
# docker node update '--label-add '{mmapp=true,mmdb=true,registry=true} $WKR_NODE_1_ID
#
# # deploy the support stack
# make deploy-support-stack
#
# # create the configs (after decrypting them in the config directory)
# pushd config
# gpg2 --decrypt --output signalmaster.local-production.yml.1 signalmaster.local-production.yml.1.gpg
# docker config create signalmaster.local-production.yml.1 signalmaster.local-production.yml.1
#
# # create the secrets (after decrypting and expanding the letsencrypt tar file)
# cd secret
# gpg2 --decrypt --output letsencrypt-riffsites-20190201.tar.gz letsencrypt-riffsites-20190201.tar.gz.gpg
# tar -xvzf letsencrypt-riffsites-20190201.tar.gz
# docker secret create nexted.riffedu.com.key.1 nexted.riffedu.com.key.1
# docker secret create nexted.riffedu.com.crt.1 nexted.riffedu.com.crt.1
# popd
#
# # Standard build, push and deploy
# make clean build-prod
# make push-prod
# make deploy-stack
#
##### TODO: Work in progress, just wanted to note these pieces now, but this
#####       needs more work to be clear. -mjl
# # connect to the edu-server config and edit it:
# # ssh to the node running the edu-mm service
# docker pull ubuntu
# docker run -it --name edit-config -v edu-stack_edu-mm-config:/root/config ubuntu bash
# apt update
# apt install vim
# cd /root/config
# vim config.json
#
# # Optionally restore a mongo backup to give the staging site some initial data for testing
# # purposes
# docker cp /home/mjl/tmp/mongodb_riff-test.staging.backup-20190125185253.gz riff-stack_mongo-server.1.0q8064g1l5e2s5ay6eo7uskge:/data/
# docker exec -t riff-stack_mongo-server.1.0q8064g1l5e2s5ay6eo7uskge mongorestore --db=riff-test --gzip --archive=/data/mongodb_riff-test.staging.backup-20190125185253.gz
# docker exec -t riff-stack_mongo-server.1.0q8064g1l5e2s5ay6eo7uskge rm /data/mongodb_riff-test.staging.backup-20190125185253.gz
#
# # Optionally restore a mysql backup (I haven't figured out how to make a backup OR restore it yet!)
