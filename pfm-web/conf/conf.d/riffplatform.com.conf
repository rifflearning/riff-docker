map $http_upgrade $connection_upgrade
{
    default upgrade;
    '' close;
}

upstream rtc_upstream
{
    server pfm-riffrtc:3001;
}

upstream videodata_upstream
{
    server pfm-riffdata:3000;
}

upstream signalmaster_upstream
{
    server pfm-signalmaster:8888;
}

server
{
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name riffplatform.com www.riffplatform.com;

    # letsencrypt certbot for ssl cert renewal authorization confirmation files
    location /.well-known/acme-challenge
    {
        root /usr/share/nginx/html/certbot;
    }

    location /
    {
        return 302 https://$host$request_uri;
    }
}

server
{
    # SSL configuration

    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    include snippets/site_ssl_cert.conf;
    include snippets/ssl_params.conf;

    include snippets/proxy_params.conf;

    location /
    {
        # index.html is special request it from the rtc_upstream
        location ~ index\.html$
        {
            proxy_pass http://rtc_upstream;
            include snippets/cors_params.conf;
        }

        # all file requests can be served by nginx
        location ~ /[^./]+\.[^./]+$
        {
            root /usr/share/nginx/html/rtc;
        }

        # pass everything else to the rtc_upstream
        location ~ .*
        {
            proxy_pass http://rtc_upstream;
            include snippets/cors_params.conf;
        }
    }

    location = /healthcheck
    {
        add_header 'Access-Control-Allow-Origin' '*';
        default_type application/json;
        return 200 '{\n  "site": "$host",\n  "status": "up"\n}';
    }

    location = /favicon.ico
    {
        root /usr/share/nginx/html;
    }

    location /custom
    {
        root /usr/share/nginx/html;
    }

    location /lti_launch
    {
        proxy_pass http://rtc_upstream/lti_launch;
    }

    location /api/videodata
    {
        proxy_pass http://videodata_upstream;
    }

# See these references on how to supply a path so we can reverse proxy
# multiple upstream websocket connections since they can't all use /socket.io
# https://stackoverflow.com/questions/25896225/how-do-i-get-socket-io-running-for-a-subdirectory
# https://serverfault.com/questions/645643/using-nginx-to-proxy-multiple-instances-of-sockets-io
    location /api/videodata/socket.io/
    {
        proxy_pass http://videodata_upstream/socket.io/;
        include snippets/proxy_websocket_params.conf;
        include snippets/cors_params.conf;
    }

    location /api/signalmaster/socket.io/
    {
        proxy_pass http://signalmaster_upstream/socket.io/;
        include snippets/proxy_websocket_params.conf;
    }

# SimpleWebRtc doesn't support configuring the socket.io path (yet)
# so we'll let it use the default path
    location /socket.io/
    {
        proxy_pass http://signalmaster_upstream/socket.io/;
        include snippets/proxy_websocket_params.conf;
        include snippets/cors_params.conf;
    }

    location /sockjs-node/
    {
        proxy_pass http://videodata_upstream/socket.io/;
        include snippets/proxy_websocket_params.conf;
        include snippets/cors_params.conf;
    }
}
